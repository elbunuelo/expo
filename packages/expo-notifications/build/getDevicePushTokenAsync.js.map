{"version":3,"file":"getDevicePushTokenAsync.js","sourceRoot":"","sources":["../src/getDevicePushTokenAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAMrF,MAAM,oBAAoB,GAAI,kBAAkB,CAAC,oBAAsD,CAAC;AA6BxG,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,uBAAuB;IACnD,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,EAAE;QACjD,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC,CAAC;KAC/E;IAED,MAAM,eAAe,GAAG,MAAM,oBAAoB,CAAC,uBAAuB,EAAE,CAAC;IAE7E,uFAAuF;IACvF,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;AACtD,CAAC","sourcesContent":["import { UnavailabilityError, Platform, NativeModulesProxy } from '@unimodules/core';\n\ninterface PushTokenManagerModule {\n  getDevicePushTokenAsync: () => Promise<string>;\n}\n\nconst ExpoPushTokenManager = (NativeModulesProxy.ExpoPushTokenManager as any) as PushTokenManagerModule;\n\nexport interface NativeDevicePushToken {\n  type: 'ios' | 'android';\n  data: string;\n}\n\nexport interface WebDevicePushToken {\n  type: 'web';\n  data: {\n    endpoint: string;\n    keys: {\n      p256dh: string;\n      auth: string;\n    };\n  };\n}\n\ntype ExplicitlySupportedDevicePushToken = NativeDevicePushToken | WebDevicePushToken;\n\ntype ImplicitlySupportedDevicePushToken = {\n  type: Exclude<typeof Platform.OS, ExplicitlySupportedDevicePushToken['type']>;\n  data: any;\n};\n\nexport type DevicePushToken =\n  | ExplicitlySupportedDevicePushToken\n  | ImplicitlySupportedDevicePushToken;\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  if (!ExpoPushTokenManager.getDevicePushTokenAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getDevicePushTokenAsync');\n  }\n\n  const devicePushToken = await ExpoPushTokenManager.getDevicePushTokenAsync();\n\n  // @ts-ignore: TS thinks Platform.OS could be anything and can't decide what type is it\n  return { type: Platform.OS, data: devicePushToken };\n}\n"]}